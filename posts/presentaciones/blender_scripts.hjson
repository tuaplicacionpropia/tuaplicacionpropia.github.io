title: Blender Scripts
subtitle: Slideshows
image: https://i.imgur.com/Xt3ShtQ.jpg
subtitle1:
  '''
  Descripción1 Design2
  '''
subtitle2:
  '''
  Descripción2 Design2
  '''
  
tag: blender
description:
  '''
Crea un slideshow automáticamente con scripts en blender
  '''
content:
  '''


### Plugin - Código fuente

```md

import bpy
import os

def add_image (path, idx):
  file = os.path.abspath(path)
  bpy.ops.import_image.to_plane(
    files=[{'name': os.path.basename(file)}],
    directory=os.path.dirname(file),
    relative=False
  )
  obj = bpy.context.active_object
  obj.name = 'aleluya' + str(idx)
  ratio = 1.50470
  obj.rotation_euler = (0, 0, 0)
  #Size
  obj.dimensions = (ratio, 1, 0)
  #Location
  obj.location = (1, idx * (ratio + 0.1), 1)  
  objects = bpy.data.objects
  obj.parent = objects['fotos']
  

def add_folder (path):
  idx = 1
  files = os.listdir(path)
  for file in files:
    if file.endswith('.jpg'):
      fullpath = os.path.join(path, file)
      add_image(fullpath, idx)
      idx += 1

#for i in range(1, 10):
#  add_image("/media/jmramoss/ALMACEN/slideshow/ramsau-3564068_960_720.jpg", i)


bpy.ops.object.empty_add(type='CUBE')
obj = bpy.context.active_object
obj.name = 'fotos'
add_folder("/media/jmramoss/ALMACEN/slideshow/")

#bpy.ops.mesh.primitive_plane_add(location=(0,0,0))
#bpy.context.active_object.name = 'aleluya'
#bpy.context.object.rotation_euler[1] = 1.5708
#bpy.ops.import_image.to_plane(files=[{"name":"cat-3553106_960_720.jpg", "name":"cat-3553106_960_720.jpg"}], directory="/media/jmramoss/ALMACEN/slideshow/", relative=False)
#list(bpy.data.objects)


```
 
### Plugin mejorado - código fuente
 
```md

import bpy
import os
import math
import random
from PIL import Image


class Slideshow:
  def __init__ (self, name):
    self.name = name
    self.parentObj = None
    self.folder = None
    self.photos = []


  def selectPhotos (self, path):
    files = os.listdir(path)
    for file in files:
      if file.lower().endswith('.jpg') or file.lower().endswith('.png'):
        fullpath = os.path.join(path, file)
        photo = Photo(fullpath)
        self.photos.append(photo)

  def shufflePhotos (self):
    random.shuffle(self.photos)

  def shuffleTranslate (self, maxX = 0.1, maxY = 0.1):
    for photo in self.photos:
      incX = random.uniform(-maxX, maxX)
      incY = random.uniform(-maxY, maxY)
      photo.obj.location[0] += incX
      photo.obj.location[1] += incY

  def shuffleRotateZ (self, maxZ = 0.1):
    for photo in self.photos:
      rotZ = random.uniform(-maxZ, maxZ)
      photo.obj.rotation_euler[2] += rotZ

  def alignColumn (self, separator = 0.05):
    prev = None
    for photo in self.photos:
      if prev is not None:
        pivot = prev.get_topleft()
        photo.obj.location[0] = pivot[0] + (photo.obj.dimensions[0]/2)
        photo.obj.location[1] = pivot[1] + (photo.obj.dimensions[1]/2) + separator
      prev = photo

  def alignGrid (self, separator = 0.05):
    prev = None
    numPhotos = len(self.photos)
    gridSize = math.ceil(math.sqrt(numPhotos))
    gridPhotos = [None] * gridSize
    for i in range(gridSize):
      gridPhotos[i] = [None] * gridSize
    idx = 0
    for i in range(gridSize):
      for j in range(gridSize):
        toAdd = None
        if (idx < numPhotos):
          toAdd = self.photos[idx]
        else:
          refAdd = self.photos[(idx % numPhotos)]
          toAdd = Photo(refAdd.path)
          toAdd.draw()
          toAdd.set_name('pic' + str(idx + 1))
          toAdd.obj.parent = bpy.data.objects[self.name]
          self.parentObj = toAdd.obj.parent
          self.photos.append(toAdd)
        gridPhotos[i][j] = toAdd
        idx += 1
    for i in range(gridSize):
      for j in range(gridSize):
        photo = gridPhotos[i][j]
        if (not (i == 0 and j == 0)):
          if (j == 0):
            bigWidth = gridPhotos[i-1][0]
            for k in range(1, gridSize):
              itemWidth = gridPhotos[i-1][k]
              if (itemWidth.width > bigWidth.width):
                bigWidth = itemWidth
            pivot = bigWidth.get_rightcenter()
            photo.obj.location[0] = pivot[0] + (photo.obj.dimensions[0]/2) + separator
            photo.obj.location[1] = gridPhotos[i-1][0].get_rightcenter()[1]
          else:
            pivot = gridPhotos[i][j - 1].get_topleft()
            photo.obj.location[0] = pivot[0] + (photo.obj.dimensions[0]/2)
            photo.obj.location[1] = pivot[1] + (photo.obj.dimensions[1]/2) + separator
          photo.obj.location[2] += ((i+j) * 0.00001)

  def draw (self):
    prev = None
    idx = 1
    
    bpy.ops.object.empty_add(type='CUBE')
    parent = bpy.context.active_object
    parent.name = self.name
    self.parentObj = parent
    
    for photo in self.photos:
      photo.draw()
      photo.set_name('pic' + str(idx))
      #photo.obj.parent = bpy.data.objects[self.name]
      photo.obj.parent = parent
      idx += 1

class Photo:
  def __init__ (self, path):
    self.obj = None
    self.path = os.path.abspath(path)
    self.width = None
    self.height = None
    im = Image.open(self.path)
    self.width, self.height = im.size
    im.close()

  def get_size (self):
    return self.obj.dimensions

  def get_location (self):
    return self.obj.location

  def get_corner (self, top, left):
    result = None
    loc = self.get_location()
    size = self.get_size()
    locY = loc[1] + top*(size[1]/2)
    locX = loc[0] + left*(size[0]/2)
    result = (locX, locY, loc[2])
    return result

  def get_name(self):
    return self.obj.name

  def set_name(self, newValue):
    self.obj.name = newValue

  def get_topleft (self):
    return self.get_corner(1, -1)

  def get_topcenter (self):
    return self.get_corner(1, 0)

  def get_topright (self):
    return self.get_corner(1, 1)

  def get_bottomleft (self):
    return self.get_corner(-1, -1)

  def get_bottomcenter (self):
    return self.get_corner(-1, 0)

  def get_bottomright (self):
    return self.get_corner(-1, 1)

  def get_side (self, left):
    result = None
    loc = self.get_location()
    size = self.get_size()
    locX = loc[0] + left*(size[0]/2)
    result = (locX, loc[1], loc[2])
    return result

  def get_leftcenter (self, left):
    return self.get_side(-1)

  def get_center (self):
    return self.get_location()

  def get_rightcenter (self):
    return self.get_side(1)


  def draw (self):
    ratio = self.width / self.height
    bpy.ops.import_image.to_plane(
      files=[{'name': os.path.basename(self.path)}],
      directory=os.path.dirname(self.path),
      relative=False
    )
    self.obj = bpy.context.active_object
    #self.obj.name = 'aleluya' + str(idx)
    #self.obj.name = 'aleluya'
    #ratio = 1.50470
    self.obj.rotation_euler = (0, 0, 0)
    #Size
    self.obj.dimensions = (ratio, 1, 0)
    #Location
    locY = 0
    #if idx > 1:
    #  prevObj = objects['aleluya' + str(idx - 1)]
    #  locY += prevObj.location[1] + (prevObj.dimensions[1]/2) + (self.obj.dimensions[1]/2)
    #locY = idx * (ratio + 0.1)
    self.obj.location = (1, locY, 1)
  


#for i in range(1, 10):
#  add_image("/media/jmramoss/ALMACEN/slideshow/ramsau-3564068_960_720.jpg", i)

bpy.context.scene.world.light_settings.use_ambient_occlusion = True
bpy.context.scene.world.light_settings.ao_factor = 1.0

for i in range(2):
  slideshow = Slideshow('background' + str(i))
  slideshow.selectPhotos("/media/jmramoss/ALMACEN/slideshow/grid_frames/")
  slideshow.shufflePhotos()
  slideshow.draw()
  #slideshow.alignColumn()
  slideshow.alignGrid()
  slideshow.shuffleTranslate()
  slideshow.shuffleRotateZ()
  slideshow.parentObj.location[0] += (random.uniform(-0.3, 0.3) * i)
  slideshow.parentObj.location[1] += (random.uniform(-0.3, 0.3) * i)
  slideshow.parentObj.location[2] += (random.uniform(-0.1, 0.1) * i)
  

#bpy.ops.mesh.primitive_plane_add(location=(0,0,0))
#bpy.context.active_object.name = 'aleluya'
#bpy.context.object.rotation_euler[1] = 1.5708
#bpy.ops.import_image.to_plane(files=[{"name":"cat-3553106_960_720.jpg", "name":"cat-3553106_960_720.jpg"}], directory="/media/jmramoss/ALMACEN/slideshow/", relative=False)
#list(bpy.data.objects)

```
 
 
  '''
 
